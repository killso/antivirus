//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFService
{
    using System.Runtime.Serialization;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "FileDescription", Namespace = "http://schemas.datacontract.org/2004/07/WCFService")]
    public partial class FileDescription : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private bool isCheckedField;

        private bool isVirusField;

        private string pathField;

        private WCFService.FileDescription.FilesStates stateField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isChecked
        {
            get
            {
                return this.isCheckedField;
            }
            set
            {
                this.isCheckedField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isVirus
        {
            get
            {
                return this.isVirusField;
            }
            set
            {
                this.isVirusField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFService.FileDescription.FilesStates state
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name = "FileDescription.FilesStates", Namespace = "http://schemas.datacontract.org/2004/07/WCFService")]
        public enum FilesStates : int
        {

            [System.Runtime.Serialization.EnumMemberAttribute()]
            Allow = 0,

            [System.Runtime.Serialization.EnumMemberAttribute()]
            ToQuarantine = 1,

            [System.Runtime.Serialization.EnumMemberAttribute()]
            RemoveFromQuarantine = 2,

            [System.Runtime.Serialization.EnumMemberAttribute()]
            Delete = 3,
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Inspection", Namespace = "http://schemas.datacontract.org/2004/07/WCFService")]
    public partial class Inspection : object, System.Runtime.Serialization.IExtensibleDataObject
    {

        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;

        private bool doneField;

        private int idField;

        private string pathField;

        private System.DateTime timeField;

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool done
        {
            get
            {
                return this.doneField;
            }
            set
            {
                this.doneField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime time
        {
            get
            {
                return this.timeField;
            }
            set
            {
                this.timeField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IService")]
public interface IService
{

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/start_scanner", ReplyAction = "http://tempuri.org/IService/start_scannerResponse")]
    void start_scanner(string path);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/start_scanner", ReplyAction = "http://tempuri.org/IService/start_scannerResponse")]
    System.Threading.Tasks.Task start_scannerAsync(string path);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/stop_scanner", ReplyAction = "http://tempuri.org/IService/stop_scannerResponse")]
    void stop_scanner();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/stop_scanner", ReplyAction = "http://tempuri.org/IService/stop_scannerResponse")]
    System.Threading.Tasks.Task stop_scannerAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_scanner_statistics", ReplyAction = "http://tempuri.org/IService/get_scanner_statisticsResponse")]
    string get_scanner_statistics();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_scanner_statistics", ReplyAction = "http://tempuri.org/IService/get_scanner_statisticsResponse")]
    System.Threading.Tasks.Task<string> get_scanner_statisticsAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_scanner_result", ReplyAction = "http://tempuri.org/IService/get_scanner_resultResponse")]
    string[] get_scanner_result();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_scanner_result", ReplyAction = "http://tempuri.org/IService/get_scanner_resultResponse")]
    System.Threading.Tasks.Task<string[]> get_scanner_resultAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_scanner_status", ReplyAction = "http://tempuri.org/IService/get_scanner_statusResponse")]
    bool get_scanner_status();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_scanner_status", ReplyAction = "http://tempuri.org/IService/get_scanner_statusResponse")]
    System.Threading.Tasks.Task<bool> get_scanner_statusAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/start_observer", ReplyAction = "http://tempuri.org/IService/start_observerResponse")]
    void start_observer(string path);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/start_observer", ReplyAction = "http://tempuri.org/IService/start_observerResponse")]
    System.Threading.Tasks.Task start_observerAsync(string path);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/stop_observer", ReplyAction = "http://tempuri.org/IService/stop_observerResponse")]
    void stop_observer();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/stop_observer", ReplyAction = "http://tempuri.org/IService/stop_observerResponse")]
    System.Threading.Tasks.Task stop_observerAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_observer_result", ReplyAction = "http://tempuri.org/IService/get_observer_resultResponse")]
    string[] get_observer_result();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_observer_result", ReplyAction = "http://tempuri.org/IService/get_observer_resultResponse")]
    System.Threading.Tasks.Task<string[]> get_observer_resultAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_observer_status", ReplyAction = "http://tempuri.org/IService/get_observer_statusResponse")]
    bool get_observer_status();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_observer_status", ReplyAction = "http://tempuri.org/IService/get_observer_statusResponse")]
    System.Threading.Tasks.Task<bool> get_observer_statusAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/handle_files", ReplyAction = "http://tempuri.org/IService/handle_filesResponse")]
    void handle_files(WCFService.FileDescription[] files, WCFService.Inspection inspection);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/handle_files", ReplyAction = "http://tempuri.org/IService/handle_filesResponse")]
    System.Threading.Tasks.Task handle_filesAsync(WCFService.FileDescription[] files, WCFService.Inspection inspection);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/add_inspection", ReplyAction = "http://tempuri.org/IService/add_inspectionResponse")]
    void add_inspection(WCFService.Inspection inspection);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/add_inspection", ReplyAction = "http://tempuri.org/IService/add_inspectionResponse")]
    System.Threading.Tasks.Task add_inspectionAsync(WCFService.Inspection inspection);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/remove_inspection", ReplyAction = "http://tempuri.org/IService/remove_inspectionResponse")]
    void remove_inspection(WCFService.Inspection inspection);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/remove_inspection", ReplyAction = "http://tempuri.org/IService/remove_inspectionResponse")]
    System.Threading.Tasks.Task remove_inspectionAsync(WCFService.Inspection inspection);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_inspections", ReplyAction = "http://tempuri.org/IService/get_inspectionsResponse")]
    WCFService.Inspection[] get_inspections();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_inspections", ReplyAction = "http://tempuri.org/IService/get_inspectionsResponse")]
    System.Threading.Tasks.Task<WCFService.Inspection[]> get_inspectionsAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_inspection_results", ReplyAction = "http://tempuri.org/IService/get_inspection_resultsResponse")]
    string[] get_inspection_results(WCFService.Inspection inspection);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_inspection_results", ReplyAction = "http://tempuri.org/IService/get_inspection_resultsResponse")]
    System.Threading.Tasks.Task<string[]> get_inspection_resultsAsync(WCFService.Inspection inspection);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_quarantine", ReplyAction = "http://tempuri.org/IService/get_quarantineResponse")]
    string[] get_quarantine();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/get_quarantine", ReplyAction = "http://tempuri.org/IService/get_quarantineResponse")]
    System.Threading.Tasks.Task<string[]> get_quarantineAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IServiceChannel : IService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ServiceClient : System.ServiceModel.ClientBase<IService>, IService
{

    public ServiceClient()
    {
    }

    public ServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
    {
    }

    public ServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
    {
    }

    public void start_scanner(string path)
    {
        base.Channel.start_scanner(path);
    }

    public System.Threading.Tasks.Task start_scannerAsync(string path)
    {
        return base.Channel.start_scannerAsync(path);
    }

    public void stop_scanner()
    {
        base.Channel.stop_scanner();
    }

    public System.Threading.Tasks.Task stop_scannerAsync()
    {
        return base.Channel.stop_scannerAsync();
    }

    public string get_scanner_statistics()
    {
        return base.Channel.get_scanner_statistics();
    }

    public System.Threading.Tasks.Task<string> get_scanner_statisticsAsync()
    {
        return base.Channel.get_scanner_statisticsAsync();
    }

    public string[] get_scanner_result()
    {
        return base.Channel.get_scanner_result();
    }

    public System.Threading.Tasks.Task<string[]> get_scanner_resultAsync()
    {
        return base.Channel.get_scanner_resultAsync();
    }

    public bool get_scanner_status()
    {
        return base.Channel.get_scanner_status();
    }

    public System.Threading.Tasks.Task<bool> get_scanner_statusAsync()
    {
        return base.Channel.get_scanner_statusAsync();
    }

    public void start_observer(string path)
    {
        base.Channel.start_observer(path);
    }

    public System.Threading.Tasks.Task start_observerAsync(string path)
    {
        return base.Channel.start_observerAsync(path);
    }

    public void stop_observer()
    {
        base.Channel.stop_observer();
    }

    public System.Threading.Tasks.Task stop_observerAsync()
    {
        return base.Channel.stop_observerAsync();
    }

    public string[] get_observer_result()
    {
        return base.Channel.get_observer_result();
    }

    public System.Threading.Tasks.Task<string[]> get_observer_resultAsync()
    {
        return base.Channel.get_observer_resultAsync();
    }

    public bool get_observer_status()
    {
        return base.Channel.get_observer_status();
    }

    public System.Threading.Tasks.Task<bool> get_observer_statusAsync()
    {
        return base.Channel.get_observer_statusAsync();
    }

    public void handle_files(WCFService.FileDescription[] files, WCFService.Inspection inspection)
    {
        base.Channel.handle_files(files, inspection);
    }

    public System.Threading.Tasks.Task handle_filesAsync(WCFService.FileDescription[] files, WCFService.Inspection inspection)
    {
        return base.Channel.handle_filesAsync(files, inspection);
    }

    public void add_inspection(WCFService.Inspection inspection)
    {
        base.Channel.add_inspection(inspection);
    }

    public System.Threading.Tasks.Task add_inspectionAsync(WCFService.Inspection inspection)
    {
        return base.Channel.add_inspectionAsync(inspection);
    }

    public void remove_inspection(WCFService.Inspection inspection)
    {
        base.Channel.remove_inspection(inspection);
    }

    public System.Threading.Tasks.Task remove_inspectionAsync(WCFService.Inspection inspection)
    {
        return base.Channel.remove_inspectionAsync(inspection);
    }

    public WCFService.Inspection[] get_inspections()
    {
        return base.Channel.get_inspections();
    }

    public System.Threading.Tasks.Task<WCFService.Inspection[]> get_inspectionsAsync()
    {
        return base.Channel.get_inspectionsAsync();
    }

    public string[] get_inspection_results(WCFService.Inspection inspection)
    {
        return base.Channel.get_inspection_results(inspection);
    }

    public System.Threading.Tasks.Task<string[]> get_inspection_resultsAsync(WCFService.Inspection inspection)
    {
        return base.Channel.get_inspection_resultsAsync(inspection);
    }

    public string[] get_quarantine()
    {
        return base.Channel.get_quarantine();
    }

    public System.Threading.Tasks.Task<string[]> get_quarantineAsync()
    {
        return base.Channel.get_quarantineAsync();
    }
}
